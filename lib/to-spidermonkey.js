"use strict";

var Identifier = require("laserbat-ast").Identifier;
var LiteralStringExpression = require("laserbat-ast").LiteralStringExpression;
var LiteralNumericExpression = require("laserbat-ast").LiteralNumericExpression;
function convert(ast) {
  if (ast == null) {
    return null;
  }
  return Convert[ast.type](ast);
}

exports["default"] = convert;
function convertFunctionBody(node) {
  return node.directives.map(convert).concat(node.statements.map(convert));
}

function convertFunctionDeclaration(node) {
  return {
    type: "FunctionDeclaration",
    id: convert(node.name),
    params: node.parameters.map(convert),
    defaults: [],
    body: {
      type: "BlockStatement",
      body: convert(node.body)
    },
    rest: null,
    generator: false,
    expression: false
  };
}

function convertFunctionExpression(node) {
  return {
    type: "FunctionExpression",
    id: convert(node.name),
    params: node.parameters.map(convert),
    defaults: [],
    body: {
      type: "BlockStatement",
      body: convert(node.body)
    },
    rest: null,
    generator: false,
    expression: false
  };
}

function convertObjectExpression(node) {
  return {
    type: "ObjectExpression",
    properties: node.properties.map(convert)
  };
}

function convertGetter(node) {
  return {
    type: "Property",
    key: convertPropertyName(node.name),
    value: {
      type: "FunctionExpression",
      id: null,
      params: [],
      defaults: [],
      rest: null,
      body: {
        type: "BlockStatement",
        body: convertFunctionBody(node.body)
      },
      generator: false,
      expression: false
    },
    kind: "get"
  };
}

function convertSetter(node) {
  return {
    type: "Property",
    key: convertPropertyName(node.name),
    value: {
      type: "FunctionExpression",
      id: null,
      params: [convert(node.parameter)],
      defaults: [],
      rest: null,
      body: {
        type: "BlockStatement",
        body: convertFunctionBody(node.body)
      },
      generator: false,
      expression: false
    },
    kind: "set"
  };
}

function convertDataProperty(node) {
  return {
    type: "Property",
    key: convertPropertyName(node.name),
    value: convert(node.expression),
    kind: "init"
  };
}

function convertPropertyName(node) {
  switch (node.kind) {
    case "identifier":
      return convert(new Identifier(node.value));
    case "string":
      return convert(new LiteralStringExpression(node.value));
    case "number":
      return convert(new LiteralNumericExpression(+node.value));
  }
}

function convertLiteralBooleanExpression(node) {
  return {
    type: "Literal",
    value: node.value };
}

function convertLiteralNullExpression() {
  return {
    type: "Literal",
    value: null };
}

function convertLiteralNumericExpression(node) {
  return {
    type: "Literal",
    value: node.value };
}

function convertLiteralRegExpExpression(node) {
  var idx = node.value.lastIndexOf("/");
  return {
    type: "Literal",
    value: RegExp(node.value.slice(1, idx), node.value.slice(idx + 1)) };
}

function convertLiteralStringExpression(node) {
  return {
    type: "Literal",
    value: node.value };
}

function convertArrayExpression(node) {
  return {
    type: "ArrayExpression",
    elements: node.elements.map(convert)
  };
}

function convertAssignmentExpression(node) {
  return {
    type: "AssignmentExpression",
    operator: node.operator,
    left: convert(node.binding),
    right: convert(node.expression)
  };
}

function convertSequenceExpressionToArray(node) {
  var array = [];
  if (node.left.type === "BinaryExpression" && node.left.operator === ",") {
    array = convertSequenceExpressionToArray(node.left);
  } else {
    array = [convert(node.left)];
  }
  array.push(convert(node.right));
  return array;
}

function convertBinaryExpression(node) {
  if (node.operator === ",") {
    return {
      type: "SequenceExpression",
      expressions: convertSequenceExpressionToArray(node)
    };
  }
  return {
    type: node.operator === "||" || node.operator === "&&" ? "LogicalExpression" : "BinaryExpression",
    operator: node.operator,
    left: convert(node.left),
    right: convert(node.right)
  };
}

function convertCallExpression(node) {
  return {
    type: "CallExpression",
    callee: convert(node.callee),
    arguments: node.arguments.map(convert)
  };
}

function convertComputedMemberExpression(node) {
  return {
    type: "MemberExpression",
    object: convert(node.object),
    property: convert(node.expression),
    computed: true
  };
}

function convertConditionalExpression(node) {
  return {
    type: "ConditionalExpression",
    test: convert(node.test),
    alternate: convert(node.alternate),
    consequent: convert(node.consequent)
  };
}

function convertIdentifierExpression(node) {
  return convert(node.identifier);
}

function convertNewExpression(node) {
  return {
    type: "NewExpression",
    callee: convert(node.callee),
    arguments: node.arguments.map(convert)
  };
}

function convertPostfixExpression(node) {
  return {
    type: "UpdateExpression",
    operator: node.operator,
    argument: convert(node.operand),
    prefix: false
  };
}

function convertPrefixExpression(node) {
  if (node.operator === "++" || node.operator === "--") {
    return {
      type: "UpdateExpression",
      operator: node.operator,
      prefix: true,
      argument: convert(node.operand)
    };
  }
  return {
    type: "UnaryExpression",
    operator: node.operator,
    prefix: true,
    argument: convert(node.operand)
  };
}

function convertStaticMemberExpression(node) {
  return {
    type: "MemberExpression",
    object: convert(node.object),
    property: convert(node.property),
    computed: false
  };
}

function convertThisExpression() {
  return {
    type: "ThisExpression"
  };
}

function convertBlockStatement(node) {
  return convertBlock(node.block);
}

function convertBreakStatement(node) {
  return {
    type: "BreakStatement",
    label: convert(node.label)
  };
}

function convertContinueStatement(node) {
  return {
    type: "ContinueStatement",
    label: convert(node.label)
  };
}

function convertDebuggerStatement() {
  return {
    type: "DebuggerStatement"
  };
}

function convertDoWhileStatement(node) {
  return {
    type: "DoWhileStatement",
    test: convert(node.test),
    body: convert(node.body)
  };
}

function convertEmptyStatement() {
  return {
    type: "EmptyStatement"
  };
}

function convertExpressionStatement(node) {
  return {
    type: "ExpressionStatement",
    expression: convert(node.expression)
  };
}

function convertForInStatement(node) {
  return {
    type: "ForInStatement",
    left: convert(node.left),
    right: convert(node.right),
    body: convert(node.body),
    each: false
  };
}

function convertForStatement(node) {
  return {
    type: "ForStatement",
    init: convert(node.init),
    test: convert(node.test),
    update: convert(node.update),
    body: convert(node.body)
  };
}

function convertIfStatement(node) {
  return {
    type: "IfStatement",
    test: convert(node.test),
    consequent: convert(node.consequent),
    alternate: convert(node.alternate)
  };
}

function convertLabeledStatement(node) {
  return {
    type: "LabeledStatement",
    label: convertIdentifier(node.label),
    body: convert(node.body)
  };
}

function convertReturnStatement(node) {
  return {
    type: "ReturnStatement",
    argument: convert(node.expression)
  };
}

function convertSwitchStatement(node) {
  return {
    type: "SwitchStatement",
    discriminant: convert(node.discriminant),
    cases: node.cases.map(convert)
  };
}

function convertSwitchStatementWithDefault(node) {
  return {
    type: "SwitchStatement",
    discriminant: convert(node.discriminant),
    cases: node.preDefaultCases.map(convert).concat(convert(node.defaultCase)).concat(node.postDefaultCases.map(convert))
  };
}

function convertThrowStatement(node) {
  return {
    type: "ThrowStatement",
    argument: convert(node.expression)
  };
}

function convertTryCatchStatement(node) {
  return {
    type: "TryStatement",
    block: convertBlock(node.body),
    handlers: [convert(node.catchClause)],
    guardedHandlers: [],
    finalizer: null
  };
}

function convertTryFinallyStatement(node) {
  return {
    type: "TryStatement",
    block: convertBlock(node.body),
    handlers: [convert(node.catchClause)],
    guardedHandlers: [],
    finalizer: convert(node.finalizer)
  };
}

function convertVariableDeclarationStatement(node) {
  return convert(node.declaration);
}

function convertWhileStatement(node) {
  return {
    type: "WhileStatement",
    test: convert(node.test),
    body: convert(node.body)
  };
}

function convertWithStatement(node) {
  return {
    type: "WithStatement",
    object: convert(node.object),
    body: convert(node.body)
  };
}

function convertUnknownDirective(node) {
  return {
    type: "ExpressionStatement",
    expression: {
      type: "Literal",
      value: node.value }
  };
}

function convertUseStrictDirective() {
  return {
    type: "ExpressionStatement",
    expression: {
      type: "Literal",
      value: "use strict" }
  };
}

function convertBlock(node) {
  return {
    type: "BlockStatement",
    body: node.statements.map(convert)
  };
}

function convertCatchClause(node) {
  return {
    type: "CatchClause",
    param: convert(node.binding),
    body: convert(node.body)
  };
}

function convertIdentifier(node) {
  return {
    type: "Identifier",
    name: node.name
  };
}

function convertScript(node) {
  return {
    type: "Program",
    body: convertFunctionBody(node.body)
  };
}

function convertSwitchCase(node) {
  return {
    type: "SwitchCase",
    test: convert(node.test),
    consequent: node.consequent.map(convert)
  };
}

function convertSwitchDefault(node) {
  return {
    type: "SwitchCase",
    test: null,
    consequent: node.consequent.map(convert)
  };
}

function convertVariableDeclaration(node) {
  return {
    type: "VariableDeclaration",
    declarations: node.declarators.map(convert),
    kind: node.kind
  };
}

function convertVariableDeclarator(node) {
  return {
    type: "VariableDeclarator",
    id: convert(node.binding),
    init: convert(node.init)
  };
}

var Convert = {
  FunctionBody: convertFunctionBody,
  FunctionDeclaration: convertFunctionDeclaration,
  FunctionExpression: convertFunctionExpression,
  ObjectExpression: convertObjectExpression,
  Getter: convertGetter,
  Setter: convertSetter,
  DataProperty: convertDataProperty,
  PropertyName: convertPropertyName,
  LiteralBooleanExpression: convertLiteralBooleanExpression,
  LiteralNullExpression: convertLiteralNullExpression,
  LiteralNumericExpression: convertLiteralNumericExpression,
  LiteralRegExpExpression: convertLiteralRegExpExpression,
  LiteralStringExpression: convertLiteralStringExpression,
  ArrayExpression: convertArrayExpression,
  AssignmentExpression: convertAssignmentExpression,
  BinaryExpression: convertBinaryExpression,
  CallExpression: convertCallExpression,
  ComputedMemberExpression: convertComputedMemberExpression,
  ConditionalExpression: convertConditionalExpression,
  IdentifierExpression: convertIdentifierExpression,
  NewExpression: convertNewExpression,
  PostfixExpression: convertPostfixExpression,
  PrefixExpression: convertPrefixExpression,
  StaticMemberExpression: convertStaticMemberExpression,
  ThisExpression: convertThisExpression,
  BlockStatement: convertBlockStatement,
  BreakStatement: convertBreakStatement,
  ContinueStatement: convertContinueStatement,
  DebuggerStatement: convertDebuggerStatement,
  DoWhileStatement: convertDoWhileStatement,
  EmptyStatement: convertEmptyStatement,
  ExpressionStatement: convertExpressionStatement,
  ForInStatement: convertForInStatement,
  ForStatement: convertForStatement,
  IfStatement: convertIfStatement,
  LabeledStatement: convertLabeledStatement,
  ReturnStatement: convertReturnStatement,
  SwitchStatement: convertSwitchStatement,
  SwitchStatementWithDefault: convertSwitchStatementWithDefault,
  ThrowStatement: convertThrowStatement,
  TryCatchStatement: convertTryCatchStatement,
  TryFinallyStatement: convertTryFinallyStatement,
  VariableDeclarationStatement: convertVariableDeclarationStatement,
  WhileStatement: convertWhileStatement,
  WithStatement: convertWithStatement,
  UnknownDirective: convertUnknownDirective,
  UseStrictDirective: convertUseStrictDirective,
  Block: convertBlock,
  CatchClause: convertCatchClause,
  Identifier: convertIdentifier,
  Script: convertScript,
  SwitchCase: convertSwitchCase,
  SwitchDefault: convertSwitchDefault,
  VariableDeclaration: convertVariableDeclaration,
  VariableDeclarator: convertVariableDeclarator
};
//# sourceMappingURL=data:application/json;base64,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YyxFQUFFLHFCQUFxQjtBQUNyQyxnQkFBYyxFQUFFLHFCQUFxQjtBQUNyQyxtQkFBaUIsRUFBRSx3QkFBd0I7QUFDM0MsbUJBQWlCLEVBQUUsd0JBQXdCO0FBQzNDLGtCQUFnQixFQUFFLHVCQUF1QjtBQUN6QyxnQkFBYyxFQUFFLHFCQUFxQjtBQUNyQyxxQkFBbUIsRUFBRSwwQkFBMEI7QUFDL0MsZ0JBQWMsRUFBRSxxQkFBcUI7QUFDckMsY0FBWSxFQUFFLG1CQUFtQjtBQUNqQyxhQUFXLEVBQUUsa0JBQWtCO0FBQy9CLGtCQUFnQixFQUFFLHVCQUF1QjtBQUN6QyxpQkFBZSxFQUFFLHNCQUFzQjtBQUN2QyxpQkFBZSxFQUFFLHNCQUFzQjtBQUN2Qyw0QkFBMEIsRUFBRSxpQ0FBaUM7QUFDN0QsZ0JBQWMsRUFBRSxxQkFBcUI7QUFDckMsbUJBQWlCLEVBQUUsd0JBQXdCO0FBQzNDLHFCQUFtQixFQUFFLDBCQUEwQjtBQUMvQyw4QkFBNEIsRUFBRSxtQ0FBbUM7QUFDakUsZ0JBQWMsRUFBRSxxQkFBcUI7QUFDckMsZUFBYSxFQUFFLG9CQUFvQjtBQUNuQyxrQkFBZ0IsRUFBRSx1QkFBdUI7QUFDekMsb0JBQWtCLEVBQUUseUJBQXlCO0FBQzdDLE9BQUssRUFBRSxZQUFZO0FBQ25CLGFBQVcsRUFBRSxrQkFBa0I7QUFDL0IsWUFBVSxFQUFFLGlCQUFpQjtBQUM3QixRQUFNLEVBQUUsYUFBYTtBQUNyQixZQUFVLEVBQUUsaUJBQWlCO0FBQzdCLGVBQWEsRUFBRSxvQkFBb0I7QUFDbkMscUJBQW1CLEVBQUUsMEJBQTBCO0FBQy9DLG9CQUFrQixFQUFFLHlCQUF5QjtDQUM5QyxDQUFDIiwiZmlsZSI6InNyYy90by1zcGlkZXJtb25rZXkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE0IFNoYXBlIFNlY3VyaXR5LCBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKVxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgSWRlbnRpZmllcixcbiAgTGl0ZXJhbFN0cmluZ0V4cHJlc3Npb24sXG4gIExpdGVyYWxOdW1lcmljRXhwcmVzc2lvbixcbn0gZnJvbSBcImxhc2VyYmF0LWFzdFwiO1xuXG4vLyBjb252ZXJ0IExhc2VyQmF0IEFTVCBmb3JtYXQgdG8gU3BpZGVyTW9ua2V5IEFTVCBmb3JtYXRcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udmVydChhc3QpIHtcbiAgaWYgKGFzdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIENvbnZlcnRbYXN0LnR5cGVdKGFzdCk7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRGdW5jdGlvbkJvZHkobm9kZSkge1xuICByZXR1cm4gbm9kZS5kaXJlY3RpdmVzLm1hcChjb252ZXJ0KS5jb25jYXQobm9kZS5zdGF0ZW1lbnRzLm1hcChjb252ZXJ0KSlcbn1cblxuZnVuY3Rpb24gY29udmVydEZ1bmN0aW9uRGVjbGFyYXRpb24obm9kZSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiRnVuY3Rpb25EZWNsYXJhdGlvblwiLFxuICAgIGlkOiBjb252ZXJ0KG5vZGUubmFtZSksXG4gICAgcGFyYW1zOiBub2RlLnBhcmFtZXRlcnMubWFwKGNvbnZlcnQpLFxuICAgIGRlZmF1bHRzOiBbXSxcbiAgICBib2R5OiB7XG4gICAgICB0eXBlOiBcIkJsb2NrU3RhdGVtZW50XCIsXG4gICAgICBib2R5OiBjb252ZXJ0KG5vZGUuYm9keSlcbiAgICB9LFxuICAgIHJlc3Q6IG51bGwsXG4gICAgZ2VuZXJhdG9yOiBmYWxzZSxcbiAgICBleHByZXNzaW9uOiBmYWxzZVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0RnVuY3Rpb25FeHByZXNzaW9uKG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIkZ1bmN0aW9uRXhwcmVzc2lvblwiLFxuICAgIGlkOiBjb252ZXJ0KG5vZGUubmFtZSksXG4gICAgcGFyYW1zOiBub2RlLnBhcmFtZXRlcnMubWFwKGNvbnZlcnQpLFxuICAgIGRlZmF1bHRzOiBbXSxcbiAgICBib2R5OiB7XG4gICAgICB0eXBlOiBcIkJsb2NrU3RhdGVtZW50XCIsXG4gICAgICBib2R5OiBjb252ZXJ0KG5vZGUuYm9keSlcbiAgICB9LFxuICAgIHJlc3Q6IG51bGwsXG4gICAgZ2VuZXJhdG9yOiBmYWxzZSxcbiAgICBleHByZXNzaW9uOiBmYWxzZVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0T2JqZWN0RXhwcmVzc2lvbihub2RlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJPYmplY3RFeHByZXNzaW9uXCIsXG4gICAgcHJvcGVydGllczogbm9kZS5wcm9wZXJ0aWVzLm1hcChjb252ZXJ0KVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0R2V0dGVyKG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIlByb3BlcnR5XCIsXG4gICAga2V5OiBjb252ZXJ0UHJvcGVydHlOYW1lKG5vZGUubmFtZSksXG4gICAgdmFsdWU6IHtcbiAgICAgIHR5cGU6IFwiRnVuY3Rpb25FeHByZXNzaW9uXCIsXG4gICAgICBpZDogbnVsbCxcbiAgICAgIHBhcmFtczogW10sXG4gICAgICBkZWZhdWx0czogW10sXG4gICAgICByZXN0OiBudWxsLFxuICAgICAgYm9keToge1xuICAgICAgICB0eXBlOiBcIkJsb2NrU3RhdGVtZW50XCIsXG4gICAgICAgIGJvZHk6IGNvbnZlcnRGdW5jdGlvbkJvZHkobm9kZS5ib2R5KVxuICAgICAgfSxcbiAgICAgIGdlbmVyYXRvcjogZmFsc2UsXG4gICAgICBleHByZXNzaW9uOiBmYWxzZVxuICAgIH0sXG4gICAga2luZDogXCJnZXRcIlxuICB9O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0U2V0dGVyKG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIlByb3BlcnR5XCIsXG4gICAga2V5OiBjb252ZXJ0UHJvcGVydHlOYW1lKG5vZGUubmFtZSksXG4gICAgdmFsdWU6IHtcbiAgICAgIHR5cGU6IFwiRnVuY3Rpb25FeHByZXNzaW9uXCIsXG4gICAgICBpZDogbnVsbCxcbiAgICAgIHBhcmFtczogW2NvbnZlcnQobm9kZS5wYXJhbWV0ZXIpXSxcbiAgICAgIGRlZmF1bHRzOiBbXSxcbiAgICAgIHJlc3Q6IG51bGwsXG4gICAgICBib2R5OiB7XG4gICAgICAgIHR5cGU6IFwiQmxvY2tTdGF0ZW1lbnRcIixcbiAgICAgICAgYm9keTogY29udmVydEZ1bmN0aW9uQm9keShub2RlLmJvZHkpXG4gICAgICB9LFxuICAgICAgZ2VuZXJhdG9yOiBmYWxzZSxcbiAgICAgIGV4cHJlc3Npb246IGZhbHNlXG4gICAgfSxcbiAgICBraW5kOiBcInNldFwiXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnREYXRhUHJvcGVydHkobm9kZSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiUHJvcGVydHlcIixcbiAgICBrZXk6IGNvbnZlcnRQcm9wZXJ0eU5hbWUobm9kZS5uYW1lKSxcbiAgICB2YWx1ZTogY29udmVydChub2RlLmV4cHJlc3Npb24pLFxuICAgIGtpbmQ6IFwiaW5pdFwiXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRQcm9wZXJ0eU5hbWUobm9kZSkge1xuICBzd2l0Y2ggKG5vZGUua2luZCkge1xuICAgIGNhc2UgXCJpZGVudGlmaWVyXCI6XG4gICAgICByZXR1cm4gY29udmVydChuZXcgSWRlbnRpZmllcihub2RlLnZhbHVlKSk7XG4gICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgcmV0dXJuIGNvbnZlcnQobmV3IExpdGVyYWxTdHJpbmdFeHByZXNzaW9uKG5vZGUudmFsdWUpKTtcbiAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICByZXR1cm4gY29udmVydChuZXcgTGl0ZXJhbE51bWVyaWNFeHByZXNzaW9uKCtub2RlLnZhbHVlKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29udmVydExpdGVyYWxCb29sZWFuRXhwcmVzc2lvbihub2RlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJMaXRlcmFsXCIsXG4gICAgdmFsdWU6IG5vZGUudmFsdWUsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRMaXRlcmFsTnVsbEV4cHJlc3Npb24oKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJMaXRlcmFsXCIsXG4gICAgdmFsdWU6IG51bGwsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRMaXRlcmFsTnVtZXJpY0V4cHJlc3Npb24obm9kZSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiTGl0ZXJhbFwiLFxuICAgIHZhbHVlOiBub2RlLnZhbHVlLFxuICB9O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0TGl0ZXJhbFJlZ0V4cEV4cHJlc3Npb24obm9kZSkge1xuICBsZXQgaWR4ID0gbm9kZS52YWx1ZS5sYXN0SW5kZXhPZignLycpO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiTGl0ZXJhbFwiLFxuICAgIHZhbHVlOiBSZWdFeHAobm9kZS52YWx1ZS5zbGljZSgxLCBpZHgpLCBub2RlLnZhbHVlLnNsaWNlKGlkeCArIDEpKSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydExpdGVyYWxTdHJpbmdFeHByZXNzaW9uKG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIkxpdGVyYWxcIixcbiAgICB2YWx1ZTogbm9kZS52YWx1ZSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydEFycmF5RXhwcmVzc2lvbihub2RlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJBcnJheUV4cHJlc3Npb25cIixcbiAgICBlbGVtZW50czogbm9kZS5lbGVtZW50cy5tYXAoY29udmVydClcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydEFzc2lnbm1lbnRFeHByZXNzaW9uKG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIkFzc2lnbm1lbnRFeHByZXNzaW9uXCIsXG4gICAgb3BlcmF0b3I6IG5vZGUub3BlcmF0b3IsXG4gICAgbGVmdDogY29udmVydChub2RlLmJpbmRpbmcpLFxuICAgIHJpZ2h0OiBjb252ZXJ0KG5vZGUuZXhwcmVzc2lvbilcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydFNlcXVlbmNlRXhwcmVzc2lvblRvQXJyYXkobm9kZSkge1xuICBsZXQgYXJyYXkgPSBbXTtcbiAgaWYgKG5vZGUubGVmdC50eXBlID09PSBcIkJpbmFyeUV4cHJlc3Npb25cIiAmJiBub2RlLmxlZnQub3BlcmF0b3IgPT09IFwiLFwiKSB7XG4gICAgYXJyYXkgPSBjb252ZXJ0U2VxdWVuY2VFeHByZXNzaW9uVG9BcnJheShub2RlLmxlZnQpO1xuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gW2NvbnZlcnQobm9kZS5sZWZ0KV07XG4gIH1cbiAgYXJyYXkucHVzaChjb252ZXJ0KG5vZGUucmlnaHQpKTtcbiAgcmV0dXJuIGFycmF5O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0QmluYXJ5RXhwcmVzc2lvbihub2RlKSB7XG4gIGlmIChub2RlLm9wZXJhdG9yID09PSBcIixcIikge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIlNlcXVlbmNlRXhwcmVzc2lvblwiLFxuICAgICAgZXhwcmVzc2lvbnM6IGNvbnZlcnRTZXF1ZW5jZUV4cHJlc3Npb25Ub0FycmF5KG5vZGUpXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHR5cGU6IG5vZGUub3BlcmF0b3IgPT09IFwifHxcIiB8fCBub2RlLm9wZXJhdG9yID09PSBcIiYmXCIgPyBcIkxvZ2ljYWxFeHByZXNzaW9uXCIgOiBcIkJpbmFyeUV4cHJlc3Npb25cIixcbiAgICBvcGVyYXRvcjogbm9kZS5vcGVyYXRvcixcbiAgICBsZWZ0OiBjb252ZXJ0KG5vZGUubGVmdCksXG4gICAgcmlnaHQ6IGNvbnZlcnQobm9kZS5yaWdodClcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydENhbGxFeHByZXNzaW9uKG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIkNhbGxFeHByZXNzaW9uXCIsXG4gICAgY2FsbGVlOiBjb252ZXJ0KG5vZGUuY2FsbGVlKSxcbiAgICBhcmd1bWVudHM6IG5vZGUuYXJndW1lbnRzLm1hcChjb252ZXJ0KVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0Q29tcHV0ZWRNZW1iZXJFeHByZXNzaW9uKG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIk1lbWJlckV4cHJlc3Npb25cIixcbiAgICBvYmplY3Q6IGNvbnZlcnQobm9kZS5vYmplY3QpLFxuICAgIHByb3BlcnR5OiBjb252ZXJ0KG5vZGUuZXhwcmVzc2lvbiksXG4gICAgY29tcHV0ZWQ6IHRydWVcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydENvbmRpdGlvbmFsRXhwcmVzc2lvbihub2RlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJDb25kaXRpb25hbEV4cHJlc3Npb25cIixcbiAgICB0ZXN0OiBjb252ZXJ0KG5vZGUudGVzdCksXG4gICAgYWx0ZXJuYXRlOiBjb252ZXJ0KG5vZGUuYWx0ZXJuYXRlKSxcbiAgICBjb25zZXF1ZW50OiBjb252ZXJ0KG5vZGUuY29uc2VxdWVudClcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydElkZW50aWZpZXJFeHByZXNzaW9uKG5vZGUpIHtcbiAgcmV0dXJuIGNvbnZlcnQobm9kZS5pZGVudGlmaWVyKTtcbn1cblxuZnVuY3Rpb24gY29udmVydE5ld0V4cHJlc3Npb24obm9kZSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiTmV3RXhwcmVzc2lvblwiLFxuICAgIGNhbGxlZTogY29udmVydChub2RlLmNhbGxlZSksXG4gICAgYXJndW1lbnRzOiBub2RlLmFyZ3VtZW50cy5tYXAoY29udmVydClcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydFBvc3RmaXhFeHByZXNzaW9uKG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIlVwZGF0ZUV4cHJlc3Npb25cIixcbiAgICBvcGVyYXRvcjogbm9kZS5vcGVyYXRvcixcbiAgICBhcmd1bWVudDogY29udmVydChub2RlLm9wZXJhbmQpLFxuICAgIHByZWZpeDogZmFsc2VcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydFByZWZpeEV4cHJlc3Npb24obm9kZSkge1xuICBpZiAobm9kZS5vcGVyYXRvciA9PT0gXCIrK1wiIHx8IG5vZGUub3BlcmF0b3IgPT09IFwiLS1cIikge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIlVwZGF0ZUV4cHJlc3Npb25cIixcbiAgICAgIG9wZXJhdG9yOiBub2RlLm9wZXJhdG9yLFxuICAgICAgcHJlZml4OiB0cnVlLFxuICAgICAgYXJndW1lbnQ6IGNvbnZlcnQobm9kZS5vcGVyYW5kKVxuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiVW5hcnlFeHByZXNzaW9uXCIsXG4gICAgb3BlcmF0b3I6IG5vZGUub3BlcmF0b3IsXG4gICAgcHJlZml4OiB0cnVlLFxuICAgIGFyZ3VtZW50OiBjb252ZXJ0KG5vZGUub3BlcmFuZClcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydFN0YXRpY01lbWJlckV4cHJlc3Npb24obm9kZSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiTWVtYmVyRXhwcmVzc2lvblwiLFxuICAgIG9iamVjdDogY29udmVydChub2RlLm9iamVjdCksXG4gICAgcHJvcGVydHk6IGNvbnZlcnQobm9kZS5wcm9wZXJ0eSksXG4gICAgY29tcHV0ZWQ6IGZhbHNlXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRUaGlzRXhwcmVzc2lvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIlRoaXNFeHByZXNzaW9uXCJcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydEJsb2NrU3RhdGVtZW50KG5vZGUpIHtcbiAgcmV0dXJuIGNvbnZlcnRCbG9jayhub2RlLmJsb2NrKTtcbn1cblxuZnVuY3Rpb24gY29udmVydEJyZWFrU3RhdGVtZW50KG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIkJyZWFrU3RhdGVtZW50XCIsXG4gICAgbGFiZWw6IGNvbnZlcnQobm9kZS5sYWJlbClcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydENvbnRpbnVlU3RhdGVtZW50KG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIkNvbnRpbnVlU3RhdGVtZW50XCIsXG4gICAgbGFiZWw6IGNvbnZlcnQobm9kZS5sYWJlbClcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydERlYnVnZ2VyU3RhdGVtZW50KCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiRGVidWdnZXJTdGF0ZW1lbnRcIlxuICB9O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0RG9XaGlsZVN0YXRlbWVudChub2RlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJEb1doaWxlU3RhdGVtZW50XCIsXG4gICAgdGVzdDogY29udmVydChub2RlLnRlc3QpLFxuICAgIGJvZHk6IGNvbnZlcnQobm9kZS5ib2R5KVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0RW1wdHlTdGF0ZW1lbnQoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJFbXB0eVN0YXRlbWVudFwiXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRFeHByZXNzaW9uU3RhdGVtZW50KG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIkV4cHJlc3Npb25TdGF0ZW1lbnRcIixcbiAgICBleHByZXNzaW9uOiBjb252ZXJ0KG5vZGUuZXhwcmVzc2lvbilcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydEZvckluU3RhdGVtZW50KG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIkZvckluU3RhdGVtZW50XCIsXG4gICAgbGVmdDogY29udmVydChub2RlLmxlZnQpLFxuICAgIHJpZ2h0OiBjb252ZXJ0KG5vZGUucmlnaHQpLFxuICAgIGJvZHk6IGNvbnZlcnQobm9kZS5ib2R5KSxcbiAgICBlYWNoOiBmYWxzZVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0Rm9yU3RhdGVtZW50KG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIkZvclN0YXRlbWVudFwiLFxuICAgIGluaXQ6IGNvbnZlcnQobm9kZS5pbml0KSxcbiAgICB0ZXN0OiBjb252ZXJ0KG5vZGUudGVzdCksXG4gICAgdXBkYXRlOiBjb252ZXJ0KG5vZGUudXBkYXRlKSxcbiAgICBib2R5OiBjb252ZXJ0KG5vZGUuYm9keSlcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydElmU3RhdGVtZW50KG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIklmU3RhdGVtZW50XCIsXG4gICAgdGVzdDogY29udmVydChub2RlLnRlc3QpLFxuICAgIGNvbnNlcXVlbnQ6IGNvbnZlcnQobm9kZS5jb25zZXF1ZW50KSxcbiAgICBhbHRlcm5hdGU6IGNvbnZlcnQobm9kZS5hbHRlcm5hdGUpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRMYWJlbGVkU3RhdGVtZW50KG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIkxhYmVsZWRTdGF0ZW1lbnRcIixcbiAgICBsYWJlbDogY29udmVydElkZW50aWZpZXIobm9kZS5sYWJlbCksXG4gICAgYm9keTogY29udmVydChub2RlLmJvZHkpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRSZXR1cm5TdGF0ZW1lbnQobm9kZSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiUmV0dXJuU3RhdGVtZW50XCIsXG4gICAgYXJndW1lbnQ6IGNvbnZlcnQobm9kZS5leHByZXNzaW9uKVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0U3dpdGNoU3RhdGVtZW50KG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIlN3aXRjaFN0YXRlbWVudFwiLFxuICAgIGRpc2NyaW1pbmFudDogY29udmVydChub2RlLmRpc2NyaW1pbmFudCksXG4gICAgY2FzZXM6IG5vZGUuY2FzZXMubWFwKGNvbnZlcnQpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRTd2l0Y2hTdGF0ZW1lbnRXaXRoRGVmYXVsdChub2RlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJTd2l0Y2hTdGF0ZW1lbnRcIixcbiAgICBkaXNjcmltaW5hbnQ6IGNvbnZlcnQobm9kZS5kaXNjcmltaW5hbnQpLFxuICAgIGNhc2VzOiBub2RlLnByZURlZmF1bHRDYXNlcy5tYXAoY29udmVydCkuXG4gICAgICAgIGNvbmNhdChjb252ZXJ0KG5vZGUuZGVmYXVsdENhc2UpKS5cbiAgICAgICAgY29uY2F0KG5vZGUucG9zdERlZmF1bHRDYXNlcy5tYXAoY29udmVydCkpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRUaHJvd1N0YXRlbWVudChub2RlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJUaHJvd1N0YXRlbWVudFwiLFxuICAgIGFyZ3VtZW50OiBjb252ZXJ0KG5vZGUuZXhwcmVzc2lvbilcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydFRyeUNhdGNoU3RhdGVtZW50KG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIlRyeVN0YXRlbWVudFwiLFxuICAgIGJsb2NrOiBjb252ZXJ0QmxvY2sobm9kZS5ib2R5KSxcbiAgICBoYW5kbGVyczogW2NvbnZlcnQobm9kZS5jYXRjaENsYXVzZSldLFxuICAgIGd1YXJkZWRIYW5kbGVyczogW10sXG4gICAgZmluYWxpemVyOiBudWxsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRUcnlGaW5hbGx5U3RhdGVtZW50KG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIlRyeVN0YXRlbWVudFwiLFxuICAgIGJsb2NrOiBjb252ZXJ0QmxvY2sobm9kZS5ib2R5KSxcbiAgICBoYW5kbGVyczogW2NvbnZlcnQobm9kZS5jYXRjaENsYXVzZSldLFxuICAgIGd1YXJkZWRIYW5kbGVyczogW10sXG4gICAgZmluYWxpemVyOiBjb252ZXJ0KG5vZGUuZmluYWxpemVyKVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0VmFyaWFibGVEZWNsYXJhdGlvblN0YXRlbWVudChub2RlKSB7XG4gIHJldHVybiBjb252ZXJ0KG5vZGUuZGVjbGFyYXRpb24pO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0V2hpbGVTdGF0ZW1lbnQobm9kZSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiV2hpbGVTdGF0ZW1lbnRcIixcbiAgICB0ZXN0OiBjb252ZXJ0KG5vZGUudGVzdCksXG4gICAgYm9keTogY29udmVydChub2RlLmJvZHkpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRXaXRoU3RhdGVtZW50KG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIldpdGhTdGF0ZW1lbnRcIixcbiAgICBvYmplY3Q6IGNvbnZlcnQobm9kZS5vYmplY3QpLFxuICAgIGJvZHk6IGNvbnZlcnQobm9kZS5ib2R5KVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0VW5rbm93bkRpcmVjdGl2ZShub2RlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJFeHByZXNzaW9uU3RhdGVtZW50XCIsXG4gICAgZXhwcmVzc2lvbjoge1xuICAgICAgdHlwZTogXCJMaXRlcmFsXCIsXG4gICAgICB2YWx1ZTogbm9kZS52YWx1ZSxcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRVc2VTdHJpY3REaXJlY3RpdmUoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJFeHByZXNzaW9uU3RhdGVtZW50XCIsXG4gICAgZXhwcmVzc2lvbjoge1xuICAgICAgdHlwZTogXCJMaXRlcmFsXCIsXG4gICAgICB2YWx1ZTogXCJ1c2Ugc3RyaWN0XCIsXG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0QmxvY2sobm9kZSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiQmxvY2tTdGF0ZW1lbnRcIixcbiAgICBib2R5OiBub2RlLnN0YXRlbWVudHMubWFwKGNvbnZlcnQpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRDYXRjaENsYXVzZShub2RlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJDYXRjaENsYXVzZVwiLFxuICAgIHBhcmFtOiBjb252ZXJ0KG5vZGUuYmluZGluZyksXG4gICAgYm9keTogY29udmVydChub2RlLmJvZHkpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRJZGVudGlmaWVyKG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIklkZW50aWZpZXJcIixcbiAgICBuYW1lOiBub2RlLm5hbWVcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydFNjcmlwdChub2RlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJQcm9ncmFtXCIsXG4gICAgYm9keTogY29udmVydEZ1bmN0aW9uQm9keShub2RlLmJvZHkpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRTd2l0Y2hDYXNlKG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIlN3aXRjaENhc2VcIixcbiAgICB0ZXN0OiBjb252ZXJ0KG5vZGUudGVzdCksXG4gICAgY29uc2VxdWVudDogbm9kZS5jb25zZXF1ZW50Lm1hcChjb252ZXJ0KVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0U3dpdGNoRGVmYXVsdChub2RlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJTd2l0Y2hDYXNlXCIsXG4gICAgdGVzdDogbnVsbCxcbiAgICBjb25zZXF1ZW50OiBub2RlLmNvbnNlcXVlbnQubWFwKGNvbnZlcnQpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRWYXJpYWJsZURlY2xhcmF0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIlZhcmlhYmxlRGVjbGFyYXRpb25cIixcbiAgICBkZWNsYXJhdGlvbnM6IG5vZGUuZGVjbGFyYXRvcnMubWFwKGNvbnZlcnQpLFxuICAgIGtpbmQ6IG5vZGUua2luZFxuICB9O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0VmFyaWFibGVEZWNsYXJhdG9yKG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIlZhcmlhYmxlRGVjbGFyYXRvclwiLFxuICAgIGlkOiBjb252ZXJ0KG5vZGUuYmluZGluZyksXG4gICAgaW5pdDogY29udmVydChub2RlLmluaXQpXG4gIH07XG59XG5cbmNvbnN0IENvbnZlcnQgPSB7XG4gIEZ1bmN0aW9uQm9keTogY29udmVydEZ1bmN0aW9uQm9keSxcbiAgRnVuY3Rpb25EZWNsYXJhdGlvbjogY29udmVydEZ1bmN0aW9uRGVjbGFyYXRpb24sXG4gIEZ1bmN0aW9uRXhwcmVzc2lvbjogY29udmVydEZ1bmN0aW9uRXhwcmVzc2lvbixcbiAgT2JqZWN0RXhwcmVzc2lvbjogY29udmVydE9iamVjdEV4cHJlc3Npb24sXG4gIEdldHRlcjogY29udmVydEdldHRlcixcbiAgU2V0dGVyOiBjb252ZXJ0U2V0dGVyLFxuICBEYXRhUHJvcGVydHk6IGNvbnZlcnREYXRhUHJvcGVydHksXG4gIFByb3BlcnR5TmFtZTogY29udmVydFByb3BlcnR5TmFtZSxcbiAgTGl0ZXJhbEJvb2xlYW5FeHByZXNzaW9uOiBjb252ZXJ0TGl0ZXJhbEJvb2xlYW5FeHByZXNzaW9uLFxuICBMaXRlcmFsTnVsbEV4cHJlc3Npb246IGNvbnZlcnRMaXRlcmFsTnVsbEV4cHJlc3Npb24sXG4gIExpdGVyYWxOdW1lcmljRXhwcmVzc2lvbjogY29udmVydExpdGVyYWxOdW1lcmljRXhwcmVzc2lvbixcbiAgTGl0ZXJhbFJlZ0V4cEV4cHJlc3Npb246IGNvbnZlcnRMaXRlcmFsUmVnRXhwRXhwcmVzc2lvbixcbiAgTGl0ZXJhbFN0cmluZ0V4cHJlc3Npb246IGNvbnZlcnRMaXRlcmFsU3RyaW5nRXhwcmVzc2lvbixcbiAgQXJyYXlFeHByZXNzaW9uOiBjb252ZXJ0QXJyYXlFeHByZXNzaW9uLFxuICBBc3NpZ25tZW50RXhwcmVzc2lvbjogY29udmVydEFzc2lnbm1lbnRFeHByZXNzaW9uLFxuICBCaW5hcnlFeHByZXNzaW9uOiBjb252ZXJ0QmluYXJ5RXhwcmVzc2lvbixcbiAgQ2FsbEV4cHJlc3Npb246IGNvbnZlcnRDYWxsRXhwcmVzc2lvbixcbiAgQ29tcHV0ZWRNZW1iZXJFeHByZXNzaW9uOiBjb252ZXJ0Q29tcHV0ZWRNZW1iZXJFeHByZXNzaW9uLFxuICBDb25kaXRpb25hbEV4cHJlc3Npb246IGNvbnZlcnRDb25kaXRpb25hbEV4cHJlc3Npb24sXG4gIElkZW50aWZpZXJFeHByZXNzaW9uOiBjb252ZXJ0SWRlbnRpZmllckV4cHJlc3Npb24sXG4gIE5ld0V4cHJlc3Npb246IGNvbnZlcnROZXdFeHByZXNzaW9uLFxuICBQb3N0Zml4RXhwcmVzc2lvbjogY29udmVydFBvc3RmaXhFeHByZXNzaW9uLFxuICBQcmVmaXhFeHByZXNzaW9uOiBjb252ZXJ0UHJlZml4RXhwcmVzc2lvbixcbiAgU3RhdGljTWVtYmVyRXhwcmVzc2lvbjogY29udmVydFN0YXRpY01lbWJlckV4cHJlc3Npb24sXG4gIFRoaXNFeHByZXNzaW9uOiBjb252ZXJ0VGhpc0V4cHJlc3Npb24sXG4gIEJsb2NrU3RhdGVtZW50OiBjb252ZXJ0QmxvY2tTdGF0ZW1lbnQsXG4gIEJyZWFrU3RhdGVtZW50OiBjb252ZXJ0QnJlYWtTdGF0ZW1lbnQsXG4gIENvbnRpbnVlU3RhdGVtZW50OiBjb252ZXJ0Q29udGludWVTdGF0ZW1lbnQsXG4gIERlYnVnZ2VyU3RhdGVtZW50OiBjb252ZXJ0RGVidWdnZXJTdGF0ZW1lbnQsXG4gIERvV2hpbGVTdGF0ZW1lbnQ6IGNvbnZlcnREb1doaWxlU3RhdGVtZW50LFxuICBFbXB0eVN0YXRlbWVudDogY29udmVydEVtcHR5U3RhdGVtZW50LFxuICBFeHByZXNzaW9uU3RhdGVtZW50OiBjb252ZXJ0RXhwcmVzc2lvblN0YXRlbWVudCxcbiAgRm9ySW5TdGF0ZW1lbnQ6IGNvbnZlcnRGb3JJblN0YXRlbWVudCxcbiAgRm9yU3RhdGVtZW50OiBjb252ZXJ0Rm9yU3RhdGVtZW50LFxuICBJZlN0YXRlbWVudDogY29udmVydElmU3RhdGVtZW50LFxuICBMYWJlbGVkU3RhdGVtZW50OiBjb252ZXJ0TGFiZWxlZFN0YXRlbWVudCxcbiAgUmV0dXJuU3RhdGVtZW50OiBjb252ZXJ0UmV0dXJuU3RhdGVtZW50LFxuICBTd2l0Y2hTdGF0ZW1lbnQ6IGNvbnZlcnRTd2l0Y2hTdGF0ZW1lbnQsXG4gIFN3aXRjaFN0YXRlbWVudFdpdGhEZWZhdWx0OiBjb252ZXJ0U3dpdGNoU3RhdGVtZW50V2l0aERlZmF1bHQsXG4gIFRocm93U3RhdGVtZW50OiBjb252ZXJ0VGhyb3dTdGF0ZW1lbnQsXG4gIFRyeUNhdGNoU3RhdGVtZW50OiBjb252ZXJ0VHJ5Q2F0Y2hTdGF0ZW1lbnQsXG4gIFRyeUZpbmFsbHlTdGF0ZW1lbnQ6IGNvbnZlcnRUcnlGaW5hbGx5U3RhdGVtZW50LFxuICBWYXJpYWJsZURlY2xhcmF0aW9uU3RhdGVtZW50OiBjb252ZXJ0VmFyaWFibGVEZWNsYXJhdGlvblN0YXRlbWVudCxcbiAgV2hpbGVTdGF0ZW1lbnQ6IGNvbnZlcnRXaGlsZVN0YXRlbWVudCxcbiAgV2l0aFN0YXRlbWVudDogY29udmVydFdpdGhTdGF0ZW1lbnQsXG4gIFVua25vd25EaXJlY3RpdmU6IGNvbnZlcnRVbmtub3duRGlyZWN0aXZlLFxuICBVc2VTdHJpY3REaXJlY3RpdmU6IGNvbnZlcnRVc2VTdHJpY3REaXJlY3RpdmUsXG4gIEJsb2NrOiBjb252ZXJ0QmxvY2ssXG4gIENhdGNoQ2xhdXNlOiBjb252ZXJ0Q2F0Y2hDbGF1c2UsXG4gIElkZW50aWZpZXI6IGNvbnZlcnRJZGVudGlmaWVyLFxuICBTY3JpcHQ6IGNvbnZlcnRTY3JpcHQsXG4gIFN3aXRjaENhc2U6IGNvbnZlcnRTd2l0Y2hDYXNlLFxuICBTd2l0Y2hEZWZhdWx0OiBjb252ZXJ0U3dpdGNoRGVmYXVsdCxcbiAgVmFyaWFibGVEZWNsYXJhdGlvbjogY29udmVydFZhcmlhYmxlRGVjbGFyYXRpb24sXG4gIFZhcmlhYmxlRGVjbGFyYXRvcjogY29udmVydFZhcmlhYmxlRGVjbGFyYXRvclxufTtcbiJdfQ==